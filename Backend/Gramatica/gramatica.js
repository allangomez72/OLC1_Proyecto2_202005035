/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,16],$V2=[1,23],$V3=[1,22],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,18],$Vb=[1,25],$Vc=[1,20],$Vd=[1,21],$Ve=[1,24],$Vf=[5,32,46,51,52,63,65,66,67,68,69,70,74,75,76,81,83],$Vg=[1,47],$Vh=[1,46],$Vi=[1,54],$Vj=[1,56],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,69],$Vs=[1,70],$Vt=[1,89],$Vu=[1,88],$Vv=[1,90],$Vw=[1,91],$Vx=[1,92],$Vy=[1,93],$Vz=[1,94],$VA=[1,95],$VB=[1,96],$VC=[1,97],$VD=[1,98],$VE=[1,99],$VF=[8,21,22,23,24,34,37,38,39,40,41,42,43,44,47,79],$VG=[1,101],$VH=[1,102],$VI=[34,79],$VJ=[5,8,32,46,51,52,53,63,65,66,67,68,69,70,74,75,76,81,83],$VK=[8,21,22,34,37,38,39,40,41,42,43,44,47,79],$VL=[8,34,37,38,39,40,41,42,43,44,47,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"fn_print":7,"PYC":8,"declaracion":9,"ciclo_while":10,"asignacion":11,"inst_break":12,"llamada_funcion":13,"fn_funcion":14,"execute":15,"nativas":16,"fn_if":17,"ciclo_for":18,"ciclo_dowhile":19,"expresion":20,"RES":21,"MAS":22,"MUL":23,"DIV":24,"relacionales":25,"logicos":26,"NUMBER":27,"DOUBLE":28,"TRUE":29,"FALSE":30,"CADENA":31,"ID":32,"PARIZQ":33,"PARDER":34,"incremento":35,"decremento":36,"IGUAL":37,"DISTINTO":38,"MENOR":39,"MENORIGUAL":40,"MAYOR":41,"MAYORIGUAL":42,"AND":43,"OR":44,"NOT":45,"PRINT":46,"COUTPRINT":47,"ENDL":48,"bloque":49,"LLAVEIZQ":50,"LLAVEDER":51,"IF":52,"ELSE":53,"case":54,"CASE":55,"DOSPUNTOS":56,"bloquecase":57,"casedefault":58,"DEFAULT":59,"listacasos":60,"fn_switch":61,"SWITCH":62,"TOLOWER":63,"tipos":64,"TNUMBER":65,"TDOUBLE":66,"TSTRING":67,"TBOOL":68,"TCHAR":69,"TVOID":70,"ASIGNACION":71,"INCREMENTO":72,"DECREMENTO":73,"WHILE":74,"DO":75,"BREAK":76,"listaparametros":77,"parametros":78,"COMA":79,"lista_expresiones":80,"EXEC":81,"foriterador":82,"FOR":83,"expresionfor":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",21:"RES",22:"MAS",23:"MUL",24:"DIV",27:"NUMBER",28:"DOUBLE",29:"TRUE",30:"FALSE",31:"CADENA",32:"ID",33:"PARIZQ",34:"PARDER",37:"IGUAL",38:"DISTINTO",39:"MENOR",40:"MENORIGUAL",41:"MAYOR",42:"MAYORIGUAL",43:"AND",44:"OR",45:"NOT",46:"PRINT",47:"COUTPRINT",48:"ENDL",50:"LLAVEIZQ",51:"LLAVEDER",52:"IF",53:"ELSE",55:"CASE",56:"DOSPUNTOS",59:"DEFAULT",62:"SWITCH",63:"TOLOWER",65:"TNUMBER",66:"TDOUBLE",67:"TSTRING",68:"TBOOL",69:"TCHAR",70:"TVOID",71:"ASIGNACION",72:"INCREMENTO",73:"DECREMENTO",74:"WHILE",75:"DO",76:"BREAK",79:"COMA",81:"EXEC",83:"FOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[20,2],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,3],[20,1],[20,1],[20,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[26,3],[26,3],[26,2],[7,3],[7,5],[49,3],[49,2],[17,5],[17,7],[17,7],[54,4],[57,2],[57,1],[58,3],[60,4],[60,3],[60,3],[61,5],[16,4],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[9,4],[11,3],[35,2],[36,2],[10,5],[19,6],[12,1],[14,5],[14,6],[78,2],[77,3],[77,1],[13,3],[13,4],[80,3],[80,1],[15,2],[82,1],[82,1],[82,1],[18,9],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 29:
 this.$ = $$[$0-1];
break;
case 13: case 14: case 15: case 21: case 22: case 30: case 31: case 32:
 this.$ = $$[$0];
break;
case 16:
 this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],OpAritmetica.RESTA,0,0);
break;
case 17:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,0,0);
break;
case 18:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,0,0);
break;
case 19:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,0,0);
break;
case 20:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,0,0);
break;
case 23:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,0,0); 
break;
case 24:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,0,0); 
break;
case 25: case 26:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,0,0); 
break;
case 27:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,0,0); 
break;
case 28:
 this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 33:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,0,0);
break;
case 34:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,0,0);
break;
case 35:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,0,0);
break;
case 36:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,0,0);
break;
case 37:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYOR,0,0);
break;
case 38:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,0,0);
break;
case 39:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,0,0);
break;
case 40:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,0,0);
break;
case 41:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,0,0);
break;
case 42:
 this.$ = new Print($$[$0],false,0,0)
break;
case 43:
 this.$ = new Print($$[$0-2],true,0,0)
break;
case 44:
 this.$= new Bloque($$[$0-1]);
break;
case 45:
 this.$ = new Bloque([]) 
break;
case 46:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,0,0);
break;
case 47: case 48:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],0,0);
break;
case 57:
 console.log('Esto es lo de expresion: ',$$[$0-2]) 
break;
case 58:
this.$ = TipoDato.NUMBER 
break;
case 59:
this.$ = TipoDato.DOUBLE
break;
case 60:
this.$= TipoDato.STRING
break;
case 61:
this.$ = TipoDato.BOOLEANO
break;
case 62:
 this.$ = TipoDato.CHAR
break;
case 63:
 this.$ = TipoDato.VOID
break;
case 64:
console.log('Estoy asignado el valor de ',$$[$0]);
        this.$= new Declaracion($$[$0-3],$$[$0-2],$$[$0],0,0);
break;
case 65:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 66:
 this.$ = new Incremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column) 
break;
case 67:
this.$ = new Decremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column) 
break;
case 68:
this.$ = new CWhile($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 69:
this.$ = new CDoWhile($$[$0-1],$$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 70:
this.$ = new Break(_$[$0].first_line,_$[$0].first_column)
break;
case 71:
this.$ = new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 72:
this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 73:
 this.$ = ({id: $$[$0], tipo: $$[$0-1]});
break;
case 74: case 78:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 75: case 79:
 this.$ = [$$[$0]];
break;
case 76:
 this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 77:
 this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 80:
 this.$ = new Execute($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 81: case 82: case 83: case 86:
 this.$ = $$[$0]; 
break;
case 84:
 this.$ = new CFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column) 
break;
case 85:
 this.$ = $$[$0] 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,32:$V0,46:$V1,52:$V2,63:$V3,64:17,65:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9,74:$Va,75:$Vb,76:$Vc,81:$Vd,83:$Ve},{1:[3]},{5:[1,32],6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,32:$V0,46:$V1,52:$V2,63:$V3,64:17,65:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9,74:$Va,75:$Vb,76:$Vc,81:$Vd,83:$Ve},o($Vf,[2,3]),{8:[1,34]},{8:[1,35]},{8:[1,36]},{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},{8:[1,41]},{8:[1,42]},o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{47:[1,43]},{32:[1,44]},{33:[1,45]},{33:$Vg,71:$Vh},{8:[2,70]},{13:48,32:[1,49]},{33:[1,50]},{33:[1,51]},{33:[1,52]},{49:53,50:$Vi},{32:[2,58]},{32:[2,59]},{32:[2,60]},{32:[2,61]},{32:[2,62]},{32:[2,63]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),{16:66,20:55,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{33:[1,71],71:$Vs},{16:66,20:72,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:73,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:76,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:[1,74],35:67,36:68,45:$Vr,63:$V3,80:75},{8:[2,80]},{33:$Vg},{16:66,20:77,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:78,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{9:80,11:81,32:[1,83],64:82,65:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9,84:79},{74:[1,84]},{4:85,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,32:$V0,46:$V1,51:[1,86],52:$V2,63:$V3,64:17,65:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9,74:$Va,75:$Vb,76:$Vc,81:$Vd,83:$Ve},{8:[2,42],21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,47:[1,87]},{16:66,20:100,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},o($VF,[2,21]),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),o($VF,[2,27]),o($VF,[2,28],{72:$VG,73:$VH}),{16:66,20:103,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},o($VF,[2,30]),o($VF,[2,31]),o($VF,[2,32]),{16:66,20:104,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:105,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{34:[1,106],64:109,65:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9,77:107,78:108},{21:$Vt,22:$Vu,23:$Vv,24:$Vw,34:[1,110],37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE},o([8,34],[2,65],{21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE}),{8:[2,76]},{34:[1,111],79:[1,112]},o($VI,[2,79],{21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE}),{21:$Vt,22:$Vu,23:$Vv,24:$Vw,34:[1,113],37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE},{21:$Vt,22:$Vu,23:$Vv,24:$Vw,34:[1,114],37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE},{8:[1,115]},{8:[2,85]},{8:[2,86]},{32:[1,116]},{71:$Vh},{33:[1,117]},{6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,32:$V0,46:$V1,51:[1,118],52:$V2,63:$V3,64:17,65:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9,74:$Va,75:$Vb,76:$Vc,81:$Vd,83:$Ve},o($VJ,[2,45]),{48:[1,119]},{16:66,20:120,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:121,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:122,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:123,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:124,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:125,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:126,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:127,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:128,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:129,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:130,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{16:66,20:131,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},o($VF,[2,16]),o($VF,[2,66]),o($VF,[2,67]),{21:$Vt,22:$Vu,23:$Vv,24:$Vw,34:[1,132],37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE},o([8,34,47,79],[2,41],{21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE}),{8:[2,64],21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE},{49:133,50:$Vi},{34:[1,134],79:[1,135]},o($VI,[2,75]),{32:[1,136]},{49:137,50:$Vi},{8:[2,77]},{16:66,20:138,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},o($VF,[2,57]),{49:139,50:$Vi},{16:66,20:140,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},{71:$Vs},{16:66,20:141,21:$Vj,25:57,26:58,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:67,36:68,45:$Vr,63:$V3},o($VJ,[2,44]),{8:[2,43]},o($VK,[2,17],{23:$Vv,24:$Vw}),o($VK,[2,18],{23:$Vv,24:$Vw}),o($VF,[2,19]),o($VF,[2,20]),o($VL,[2,33],{21:$Vt,22:$Vu,23:$Vv,24:$Vw}),o($VL,[2,34],{21:$Vt,22:$Vu,23:$Vv,24:$Vw}),o($VL,[2,35],{21:$Vt,22:$Vu,23:$Vv,24:$Vw}),o($VL,[2,36],{21:$Vt,22:$Vu,23:$Vv,24:$Vw}),o($VL,[2,37],{21:$Vt,22:$Vu,23:$Vv,24:$Vw}),o($VL,[2,38],{21:$Vt,22:$Vu,23:$Vv,24:$Vw}),o([8,34,43,44,47,79],[2,39],{21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC}),o([8,34,44,47,79],[2,40],{21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD}),o($VF,[2,29]),{8:[2,71]},{49:142,50:$Vi},{64:109,65:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9,78:143},o($VI,[2,73]),{8:[2,68]},o($VI,[2,78],{21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE}),o($Vf,[2,46],{53:[1,144]}),{8:[1,145],21:$Vt,22:$Vu,23:$Vv,24:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE},{21:$Vt,22:$Vu,23:$Vv,24:$Vw,34:[1,146],37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE},{8:[2,72]},o($VI,[2,74]),{17:148,49:147,50:$Vi,52:$V2},{11:150,32:[1,153],35:151,36:152,82:149},o($Vf,[2,69]),o($Vf,[2,47]),o($Vf,[2,48]),{34:[1,154]},{34:[2,81]},{34:[2,82]},{34:[2,83]},{71:$Vh,72:$VG,73:$VH},{49:155,50:$Vi},o($Vf,[2,84])],
defaultActions: {20:[2,70],26:[2,58],27:[2,59],28:[2,60],29:[2,61],30:[2,62],31:[2,63],32:[2,1],48:[2,80],74:[2,76],80:[2,85],81:[2,86],111:[2,77],119:[2,43],133:[2,71],137:[2,68],142:[2,72],150:[2,81],151:[2,82],152:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../dist/src/Expresion/Aritmetica");
    const {Decremento} = require("../dist/src/Expresion/Decremento");
    const {Incremento} = require("../dist/src/Expresion/Incremento");
    const {toLower} = require("../dist/src/Expresion/FuncNativas/toLower");
    const {Relacional} = require("../dist/src/Expresion/Relacionales");
    const {Logico} = require("../dist/src/Expresion/Logicos");
    const {Primitivo} = require("../dist/src/Expresion/Primitivo");
    const {Acceso} = require("../dist/src/Expresion/Acceso");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../dist/src/Expresion/Resultado");
    const {Print} = require("../dist/src/Instruccion/Print");
    const {Bloque} = require("../dist/src/Instruccion/Bloque");
    const {Llamada} = require("../dist/src/Instruccion/Llamada");
    const {Execute} = require("../dist/src/Instruccion/Execute");
    const {Asignacion} = require("../dist/src/Instruccion/Asignacion");
    const {FN_IF} = require("../dist/src/Instruccion/Control/IF");
    const {Break} = require("../dist/src/Instruccion/Control/Break");
    const {CWhile} = require("../dist/src/Instruccion/Ciclos/While");
    const {CDoWhile} = require("../dist/src/Instruccion/Ciclos/Dowhile");
    const {CFor} = require("../dist/src/Instruccion/Ciclos/CFor");
    const {Declaracion} = require("../dist/src/Instruccion/Definiciones/Declaracion");
    const {Funcion} = require("../dist/src/Instruccion/Definiciones/Funcion");

    const {AST} = require("../dist/src/AST");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:return 28;
break;
case 2:return 27;
break;
case 3:return 81;
break;
case 4:return 46;
break;
case 5:return 47;
break;
case 6:return 48;
break;
case 7:return 29;
break;
case 8:return 30;
break;
case 9:return 65;
break;
case 10:return 67;
break;
case 11:return 69;
break;
case 12:return 68;
break;
case 13:return 70;
break;
case 14:return 66;
break;
case 15:return 75;
break;
case 16:return 74;
break;
case 17:return 76;
break;
case 18:return 'CONTINUE';
break;
case 19:return 'RETURN';
break;
case 20:return 83;
break;
case 21:return 52;
break;
case 22:return 53;
break;
case 23:return 50;
break;
case 24:return 51;
break;
case 25:return 62;
break;
case 26:return 55;
break;
case 27:return 59;
break;
case 28:return 32;
break;
case 29:return 33;
break;
case 30:return 34;
break;
case 31:return 56
break;
case 32:return 79;
break;
case 33:return 72;
break;
case 34:return 73;
break;
case 35:return 22;
break;
case 36:return 21;
break;
case 37:return 23;
break;
case 38:return 24;
break;
case 39:return 8;
break;
case 40:return 'PUNTO';
break;
case 41:return 37;
break;
case 42:return 38;
break;
case 43:return 40;
break;
case 44:return 39;
break;
case 45:return 42;
break;
case 46:return 41;
break;
case 47:return 71;
break;
case 48:return 43;
break;
case 49:return 44;
break;
case 50:return 45;
break;
case 51:return 63;
break;
case 52:return 'TOUPPER';
break;
case 53:return 'ROUND';
break;
case 54:return 'LENGTH';
break;
case 55:return 'TYPEOF'
break;
case 56:return 'TOSTRING';
break;
case 57:return 'CSTR';
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 31; 
break;
case 59:return 5;
break;
case 60:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:EXECUTE\b)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:endl\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:std::string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:void\b)/i,/^(?:double\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?::)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:std::toString\b)/i,/^(?:c_str\b)/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}